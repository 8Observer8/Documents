Система сбора и отображения данных

Привет! С работы, на которую я хочу устроиться, мне дали задание. От граммотного выполнения которого, зависит моя судьба :)

Задание на разработку системы сбора и отображения данных

Описание

В отсеке реактора атомного ледокола есть около 10 датчиков считывающих различную информацию о работе реактора. Датчики подключенны к компьютеру с Unix подобной ОС, для обработки информации с каждого датчика запущен свой процесс или тред (в дальнейшем - "Драйвер Датчика"). Сбор инормации с драйверов датчиков осуществляет установленное на этом же компьютере приложение - "Сервер Данных". На удаленном компьютере установлено приложение, отображающее полученную с датчиков информацию - "Приложение Оператора"

Драйвер Датчика

В каждый момент времени хранит текущее значение измеряемого датчиком параметра.

Сервер Данных

- Опрашивает Драйвера Датчиков и получает текущие значения.
- Хранит все изменения значений датчиков.
- По запросу от Приложения Оператора предоставляет следующие данные о состоянии датчиков:
        - текущее состояние датчика
		- состояние датчика на определённый момент времени
		- история изменений состояния датчиков за указанный период времени
		
Приложение Оператора

Запрашивает с Сервера Данных информацию и отображает ее.

Задание

- Разработать Драйвер Датчика, Сервер Данных и обеспечить между ними обмен данными
- Обеспечить обмен данными между Сервером Данных и Приложением Оператора
- Если потребуется - разработать Приложение Оператора

Условия
- Драйвер Датчика и Сервер Данных должны быть разработаны на .NET-или (C++(Qt))
- Технология обмена данными с Приложением Оператора может быть любая.
- Приложение Оператора может быть разраоотанно на любой платформе и любой ОС, или может быть использованно готовое программное обеспечение.
- В Драйвере Датчика в качестве источника данных можно использовать случайные значения.

--------------------------------------------------------------------------------------------------------------------
Я открыл примеры из Qt Creator'а. Ввёл в поиске Server. Там есть примеры: "Fortune Server Expample" и "Threaded Fortune Server"

Я так понимаю, что мне во время написания приложения нужно руководствоваться примером "Threaded Fortune Server"

Опишите, пожалуйста, как можно подробнее, как с точки зрения профи должно выглядить это приложение.
--------------------------------------------------------------------------------------------------------------------


--------------------------------------------------------------------------------------------------------------------
Я так понимаю, что мне нужно будет в Qt создать несколько проектов:

1) [b]Сервер[/b]. К нему подключаются клиенты (датчики). Сервер ждёт от датчиков показаний. Сохраняет показания (вместе с датой и временем) в бинарный (или текстовый файл)
3) [b]Клиент[/b] [1, 2, 3, ..., и т.д.]. При запуске подключается к Серверу. Отправляет серверу показания.
2) [b]Приложение Оператора[/b]. Соединяется с сервером. Отображает данные с датчиков, для этого делает запросы с периодом указанных секунд (можно менять период запросов). С Приложения Оператора можно сделать запрос прислать с сервера данные за определённый промежуток времени.
--------------------------------------------------------------------------------------------------------------------


--------------------------------------------------------------------------------------------------------------------
За основу взял FortuneServer из примеров Qt.

Создал два проекта:
IcebreakerServer - консольный проект
IcebreakerViewer - проект QMainWindow

В проекте IcebreakerServer создал класс с таким же именем: IcebreakerServer



[quote author=OKTA link=topic=26625.msg191492#msg191492 date=1394101423]
Соответственно еще вопрос  - каким методом будешь "читать данные из датчика"? 
[/quote]

В классе IcebreakerServer созда
--------------------------------------------------------------------------------------------------------------------


--------------------------------------------------------------------------------------------------------------------
Работа пользователя

- пользователь запускает IcebreakerServer
- пользователь запускает Icebreakerviewer

Ситуация видится следующим образом:

Отображение текущих значений датчиков
- Server получает данные от датчиков и сохраняет их в файл
- Viewer посылает запрос Server'у каждую секунду
- Server получает запрос от Viewer'а и посылает пакет данных с текущими значениями датчиков

Данные с датчиков за указанный период
- У viewer'а есть возможность послать запрос на данные за указанный период
- Server получает запрос от Viewer'а и открывает файл
- Server отсылает Viewer'у пакет данных за указанный период

Помогите, пожалуйста, разобраться с таким вопросом. 
--------------------------------------------------------------------------------------------------------------------


Помогите, пожалуйста, разобраться с таким вопросом. Хочу чтобы у каждого датчика был свой уникальный идентификатор. Поэтому я написал: static int mID; но компилятор ругается на эту строку:
[quote]
Sensor.cpp:10: error: undefined reference to `Sensor::mID'
[/quote]

Sensor.h
[code=cpp]
#ifndef SENSOR_H
#define SENSOR_H

#include <QString>

class Sensor
{
public:
    Sensor(const QString &sensorName, const QString &portName);

    QString sensorName() const {
        return mSensorName;
    }

    QString portName() const {
        return mPortName;
    }

    int value() const;

    int id() const {
        return mID;
    }

private:
    QString mSensorName;
    QString mPortName;
    static int mID;
};

#endif // SENSOR_H
[/code]

Sensor.cpp
[code=cpp]
#include "Sensor.h"

#include <QTime>

Sensor::Sensor(const QString &sensorName, const QString &portName) :
    mSensorName(sensorName),
    mPortName(portName)
{
    qsrand(QTime(0,0,0).secsTo(QTime::currentTime()));
    mID++;
}

int Sensor::value () const
{
    return qrand() % 10 + (mID * 10);
}
[/code]
