Пошаговая инструкция по Git. Сохранение файлов проекта на удалённый сервер (github.com)

Привет! Это пошаговая инструкция о том как сохранять файлы проекта на удалённый сервер (github.com). Ограничимся пока комментированием изменений и сохранением изменений на удалённый сервер.

У программы Git есть ещё возможности (о которых я возможно напишу позже):
- можно сделать откат к любым закомментированным изменениям
- можно создать несколько независимых веток развития проекта
- об остальных возможностях можно почитать, например здесь: http://githowto.com/ru/

Инструкция:

- регистрируемся на https://github.com/
- создаём удалённый репозитарий для хранения проекта, для этого: в правом верхнем углу сайта нажимаем значок "+" -> выбираем "New repository"
- в поле "Repository name" пишем имя проекта, например: HelloGit
- в поле "Description" пишем описание проекта, например: Первый проект
- нажимаем кнопку "Create repository"
- скачиваем и устанавливаем Git: <a href="http://msysgit.github.io/">http://msysgit.github.io/</a>
- указываем имя и электронную почту, для этого запускаем консоль и вводим команды:

git config --global user.name "Your Name"
git config --global user.email "your_email@whatever.com"

- указываем окончания строк, для этого вводим команды:

git config --global core.autocrlf true
git config --global core.safecrlf true

Примечание: имя, электронная почта и окончания строк указываются один раз после установки Git

Для работы с консолью, рекомендую скачать и установить Far Manager: http://www.farmanager.com/download.php

- запускаем Far Manager

- с помощью Far'а переходим в папку проекта, файлы которого хотим сохранить на удалённый сервер

Допустим у нас в папке с проектом лежат три файла: main.cpp, person.h, person.cpp

Примечание: чтобы в Far'е переключаться между навигацией по папкам и окном вывода консоли, нужно нажимать: Ctrl+O

- нажимаем Ctrl+O

- последовательно вводим следующие команды:

git init
git add main.cpp
git commit -m "Мой первый комментарий" main.cpp
git branch
git remote -v

Примечание: при вводе следующей команды, нужно ввести ссылку на Ваш удалённый репозитарий (вместо моей ссылки). Эту ссылку Вы получаете при создании репозитария на https://github.com/ (создание репозитария описано выше)

git push https://github.com/8Observer8/HelloGit.git refs/heads/master:refs/heads/master
git branch --set-upstream-to origin/master master

Теперь файлы проекта сохранёны на https://github.com/

Произведём изменения в  файле проекта, напишем комментарий (поясняющий изменения) и сохраним изменения на https://github.com/

git add main.cpp
git commit -m "Добавил строку для вывода \"Hello, World!\" на экран" main.cpp
git branch
git remote -v
git push https://github.com/8Observer8/HelloGit.git refs/heads/master:refs/heads/master


- нажимаем Ctrl+O
- в корне проекта создаём файл: .gitignore
- открываем файл .gitignore и добавляем в него названия файлов, которые мы не хотим добавлять под контроль git, к примеру:
[QUOTE]
*.user.pro
*.txt
[/QUOTE]

- вводим команды:

[QUOTE]
git init
git add .gitignore
git add .
[/QUOTE]

Примечание. Мы можем посмотреть в любой момент текущее состояние наших файлов, набрав: git status

Сохраняем файлы проекта на удалённый репозитарий:

[QUOTE]
git commit -am "First Commit"
git branch
git remote -v
[/QUOTE]

Примечание: при вводе следующей команду нужно ввести ссылку на Ваш удалённый репозитарий

[QUOTE]
git push https://github.com/8Observer8/HelloGit.git refs/heads/master:refs/heads/master
[/QUOTE]

- вводим логин и пароль

Проект сохранён на https://github.com/

Произведём изменения в файле проекта и сохраним эти изменения на https://github.com/

[QUOTE]
git commit -m "Добавил строку для вывода \"Hello, World!\" на экран" main.cpp
git branch
git remote -v
git push https://github.com/8Observer8/HelloGit.git refs/heads/master:refs/heads/master
[/QUOTE]

Добавим новую ветку развития проекта:

[QUOTE]
git checkout -b MyStyle
[/QUOTE]

Примечания:

1. Вместо предыдущей команды можно написать две следующих:
git branch <имяветки>
git checkout <имяветки>
См. здесь: http://githowto.com/ru/creating_a_branch

2. Мы можем переключаться между ветками развития следующим образом:
[QUOTE]
git checkout master
git checkout MyStyle
[/QUOTE]

3. Мы можем узнавать список веток и имя текущую ветки с помощью команды:
[QUOTE]
git branch
[/QUOTE]

4. Чтобы удалить файл из контроля git нужно выполнить:
[QUOTE]
git rm file1.txt
git commit -am "remove file1.txt"
[/QUOTE]

5. Мы можем посмотреть имена файлов в указаной ветке (здесь master - это имя ветки):
[QUOTE]
git ls-tree -r master --name-only
[/QUOTE]

Допустим в новой ветке мы удаляем несколько файлов, несколько добавляем, а несколько изменяем. И хотим сохранить все изменения на удалённый репозитарий.

[QUOTE]
git rm shape.cpp circle.cpp
git add rectangle.h
[/QUOTE]

Удалили: shape.cpp, circle.cpp
Добавили: rectangle.h
Изменили: main.cpp, shape.h, circle.h, rectangle.h

[QUOTE]
git commit -am "Удалили: shape.cpp circle.cpp. Добавили: rectangle.h. Изменили что-либо в: main.cpp, shape.h, circle.h, rectangle.h"
[/QUOTE]

Сохраним нашу новую ветку на удалённый репозитарий:
[QUOTE]
git branch
git remote -v
git push https://github.com/8Observer8/HelloGit.git refs/heads/MyStyle:refs/heads/MyStyle
[/QUOTE]

Примечание. Обратите внимание, что в предыдущей команде мы написали имя текущей ветки: refs/heads/MyStyle:refs/heads/MyStyle

- вводим логин и пароль

Новая ветка сохранена на https://github.com/


Изменения:

Внёс в инструкцию следующие изменения:

- добавил, как посмотреть содержимое ветки. Вот этот текст:

5. Мы можем посмотреть файлы в указаной ветке (здесь master - это имя ветки):
[QUOTE]
git ls-tree -r master --name-only
[/QUOTE]

