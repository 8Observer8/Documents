Ответ:
Результатом темы стала инструкция: "Инструкция для новичка по оформлению программ на стандартном C++ и использованию Google Test"

Инструкция для новичка по оформлению программ на стандартном C++ и использованию Google Test

В этой статье я расскажу как оформлять программы на C++ и использовать Google Test. Для этого мы будем использовать популярнейшую среду Qt Creator и фреймворк Google Test для покрытия модулей нашей программы тестами.

Инструкция очень детальная и расчитана на тех кто ещё не работал со средой Qt Creator и с фреймворком Google Test.

И так, программирование сводится к сбору, обработке, хранению и отображению данных. Мы не будем касаться "обработки" - это самая сложная часть программирования. Мы напишем простейшую программу, которая "забирает" данные из файла (в нашем случае целые числа), временно "сохраняет" их в массив и "отображает" данные в консоле.

К слову сказать, сбор данных я описал на примерах в этой теме: "Сбор данных, источники данных, ввод\вывод на Qt"
!!! Парсинг данных в этой теме: "Парсинг входных данных с помощью регулярных выражений и фреймворка Qt"
!!! Отображение данных в этой теме: "Отображение данных на Qt с помощью таблиц и графиков"
!!! Хранение данных в этой теме: "Хранение данных. Манипуляции с данными на языке SQL и фреймворка Qt"

[b]Для начала скачиваем и устанавливаем фреймворк Qt[/b] (Qt Creator идёт в комплекте), для этого:

- Нажимаем кнопку "Show Downloads" по следующей ссылке http://qt-project.org/downloads

- Нажимаем ссылку с текущей версией, например: "Qt 5.3.0 for Windows 32-bit (MinGW 4.8.2, OpenGL, 734 MB)"

- Устанавливаем Qt

[b]Переключение среды Qt Creator на английский язык[/b]

- Запускаем Qt Creator

- Выбираем в меню "Инструменты" -> "Параметры..."

- В окне "Параметры" выбираем слева "Среда" -> открываем вкладку "Основные" -> выбираем в выпадающем списке "Language" выбираем "English" -> нажимаем кнопку "OK" -> перезапускаем Qt Creator

[b]Создание нового проекта в Qt Creator[/b]

- В меню Qt Creator'а выбираем "File" -> "New File or Project..."

- В разделе "Projects" выбираем "Other Project" -> во второй колонке выбираем "Empty Qt Project"

- Нажимаем кнопку "Choose"

- В поле "Name" пишем имя проекта, например: InOutOfTextFile

- В поле "Create in" указываем путь, куда будут сохраняться файлы проекта

- Нажимаем кнопку "Next" и т.д.

[b]Написание псевдокода в main.cpp[/b]

Перед началом программирования лучше всего написать псевдокод, который мы оставим в качестве комментариев.

- Создаём файл main.cpp, для этого: кликаем правой кнопкой мыши по названию проекта (на панели "Projects" слева) и выбираем "Add New..."

- В разделе "Files and Classes" выбираем "C++" -> во второй колонке выбираем "C++ Source File"

- Нажимаем кнопку "Choose"

- В поле "Name" пишем: main -> нажимаем кнопку "Next" -> нажимаем кнопку "Finish"

- В файле "main.cpp" пишем псевдокод в виде комментариев:

[code=cpp]
int main( )
{
    // Читаем входные данные из входного файла
    
    // Выводим данные на экран
    
    // Записываем выходные данные в выходной файл
}
[/code]

[b]Разработка функций для чтения, записи и вывода данных на экран[b]

Функции для чтения, записи и вывода данных на экран будут располагаться в друх файлах:
- прототипы функций в файле freeFunctions.h
- реализации фукнций в файле freeFunctions.cpp

freeFunctions.h
[code=cpp]
#ifndef FREEFUNCTIONS_H
#define FREEFUNCTIONS_H

#include <string>
#include <vector>

void readData( const std::string &fileName,
               std::vector<int> arr );

void writeData( const std::string &fileName,
                const std::vector<int> arr );

void showData( const std::vector<int> arr );

#endif // FREEFUNCTIONS_H
[/code]

freeFunctions.cpp
[code=cpp]

#include "freeFunctions.h"

void readData( const std::string &fileName,
               std::vector<int> arr )
{

}

void writeData( const std::string &fileName,
                const std::vector<int> arr )
{

}

void showData( const std::vector<int> arr )
{

}
[/code]

[b]Псевдокод для функций чтения, записи и отображения данных[/b]

Псевдокод будет выглядеть следующим образом:

[code=cpp]

#include "freeFunctions.h"

void readData( const std::string &fileName,
               std::vector<int> arr )
{
    // Открываем файл

    // Читаем данные из файла
}

void writeData( const std::string &fileName,
                const std::vector<int> arr )
{
    // Открываем файл

    // Записываем данные в файл
}

void showData( const std::vector<int> arr )
{
    // Выводим данные на экран
}
[/code]

[b]Контроль ошибок[/b]

Очень важно сразу продумать механизм контроля ошибок. Для этих целей мы напишем свои классы исключений. Может так случится, что, к примеру, функция writeData() получит на входе пустой аргумент "fileName" и\или пустой аргумент "arr". В этом случае функция writeData должна выбросить исключение, которое вызывающая сторона должна перехваить. Поэтому для контроля логических ошибок мы созданим базовый класс LogicError и его потомок EmptyArgument.

- Добавим в наш проект два файла LogicError.h и EmptyArgument.h со следующим содержимым:

LogicError.h
[code=cpp]
[/code]

EmptyArgument.h
[code=cpp]
[/code]

Прототип функции writeData() теперь будет выглядеть следующим образом:

freeFunction.h
[code=cpp]
[/code]

Вызывающая сторона будет перехватывать логические ошибки следующим образом:

main.cpp
[code=cpp]
[/code]

Ещё необходимо контролировать такие ошибки как:
- "Ошибка открытия файла"
- "Ошибка чтения из файла"
- "Ошибка записи в файл"

Для этого, создадим базовый класс FileError и наследуем от него FileOpenError, FileReadError и FileWriteError. То есть создадим четыре заголовочный файла: "FileError.h", "FileOpenError.h", "FileReadError.h" и "FileWriteError.h" со следующим содержимым:

FileError.h
[code=cpp]
[/code]

FileOpenError.h
[code=cpp]
[/code]

FileReadError.h
[code=cpp]
[/code]

FileWriteError.h
[code=cpp]
[/code]

Функции чтения, записи и вывода данных на экран будут выбрасывать следующие исключения:

[code=cpp]
#ifndef FREEFUNCTIONS_H
#define FREEFUNCTIONS_H

#include <string>
#include <vector>

#include "EmptyArgument.h"
#include "FileOpenError.h"
#include "FileReadError.h"
#include "FileWriteError.h"

void readData( const std::string &fileName, std::string &content )
throw( EmptyArgument, FileOpenError, FileReadError );

void searchText( const std::string &text,
                 std::vector<int> &numbers )
throw( EmptyArgument );

void showNumbers( const std::vector<in> &numbers )
throw( EmptyArgument );

#endif // FREEFUNCTIONS_H
[/code]

Вызывающая сторона будет отлавливать исключения следующим образом:

[code=cpp]

#include <iostream>
#include <string>
#include <vector>

#include "freeFunctions.h"
#include "LogicError.h"
#include "FileError.h"

int main( )
{
    // Read data from the input file
    std::string fileName = "input.txt";
    std::string content;
    try {
        readData( fileName, content );
    } catch ( const LogicError &e ) {
        std::cerr << e.what( ) << std::endl;
        return 1;
    } catch ( const FileError &e ) {
        std::cerr << e.what( ) << std::endl;
        return 1;
    } catch ( ... ) {
        std::cerr << "Error: unknown exception" << std::endl;
        return 1;
    }

    // Search text
    std::string text = "my";
    std::vector<int> numbers;
    try {
        searchText( content, text, numbers );
    } catch ( const LogicError &e ) {
        std::cerr << e.what( ) << std::endl;
        return 1;
    } catch ( ... ) {
        std::cerr << "Error: unknown exception" << std::endl;
        return 1;
    }

    // Show number of lines
    try {
        showNumbers( numbers );
    } catch ( const LogicError &e ) {
        std::cerr << e.what( ) << std::endl;
        return 1;
    } catch ( ... ) {
        std::cerr << "Error: unknown exception" << std::endl;
        return 1;
    }

    return 0;
}
[/code]

На данный момент у нас не реализованны модули LogicError, FileError, FileOpenError, FileReadError, FileWriteError. Пишем реализацию для них:

[b]Разработка тестов для модулей проекта[/b]

Напишем тесты для модулей LogicError, FileError, FileOpenError, FileReadError, FileWriteError

Для каждого модуля повторяем следующее (меняем только имена проектов и содержимое main.cpp):

Примечание. О том как настроить Google Test и научиться с ним работать написано в этой инструкции: http://www.prog.org.ru/topic_26944_0.html

- В меню Qt Creator'а выбираем "File" -> "New File or Project..."

- В разделе "Projects" выбираем "Other Project" -> во второй колонке выбираем "Empty Qt Project"

- Нажимаем кнопку "Choose"

- В поле "Name" пишем имя проекта, например: InOutOfTextFile_EmptyArgument_gtests

- В поле "Create in" указываем путь, куда будут сохраняться файлы проекта. Для этого нажимаем кнопку "Browse..." -> выбираем корень проекта "InOutOfTextFile" и создаём папку "GTests" -> нажимаем кнопку "Select Folder"

- Нажимаем кнопку "Next" и т.д.

Примечание. Весь код надо писать вручную (без копипаста), чтобы "набивать руки"

Добавляем файл EmptyArgument.h следующим образом: кликаем правой кнопкой мыши по названию проекта (на панели "Projects" слева) и выбираем "Add Existing Files..." -> переходим в корень проекта "InOutOfTextFile" и выбираем файл EmptyArgument.h

Открываем файла InOutOfTextFile_EmptyArgument_gtests.pro и пишем:

[code=cpp]
[/code]

- Создаём файл main.cpp, со следующим содержимым:

main.cpp
[code=cpp]
[/code]

- Запускаем тесты (Ctrl+R)

Таким же образом, что и выше создаём проекты в папке GTests:
- InOutOfTextFile_EmptyArgument_gtests
- InOutOfTextFile_FileOpenError_gtests
- InOutOfTextFile_FileReadError_gtests
- InOutOfTextFile_FileWriteError_gtests

[b]Разработка функций чтения, записы и вывода данных на экран[/b]

- Переключаемся на основной проект InOutOfTextFile, для этого нажимаем правой кнопкой мыши по названию проекта InOutOfTextFile и выбираем "Set "InOutOfTextFile" as Active Project"

- Пишем реализацию для функций readData(), writeData() и showData():

freeFunctions.cpp
[code=cpp]
[/code]

- Создаём файл "input.txt" -> Пишем в него числа -> Запускаем приложение (Ctrl+R)

P.S. Рекомендую build-файлы тестов хранить в отдельной папке в той же директории, что и build-файлы основного проекта. Например, указать такой путь: D:\Documents\Qt\QtRegExp\001_SimpleText\build_files_for_gtests\build-SimpleText_EmptyArgument_gtests-Desktop_Qt_5_3_0_MinGW_32bit-Debug

Для этого надо 