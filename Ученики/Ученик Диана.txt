Вооружить ученика удочкой!



Хочу чтобы ты была в курсе, того куда я пранирую развиваться в Qt. В свободное время, я как и ты, тоже развиваюсь. Повторяю уже изученное и смотрю в будущее. Сейчас разбираюсь с одной программой (точнее двумя). Обе из этого туториала. По сути, в туториале всё описано, но всё же это уже почти профессиональная программа. Я прикрепил их. Твоя задача просто открыть и запустить эти программы.

Первая программа. На экран выводится экосоэдр (он постоен из примитивов OpenGL, из треугольников). Его можно вращать с помощью мыши и стрелок. Так же его можно приближать и отдалять. Попробуй запустить и проделать это.

Вторая программа. Здесь два объекта, так же построенных из примитивов (треугольников, как и все объекты 3D мира OpenGL). На эти каркасы (поверхости из треугольников) нанесены структыры (просто рисунки загружены, это делается вызовом одной функции OpenGL). Эти объекты движутся вверх вниз (тут продемострирована работа с таймером, а значин, это пример простой анимации). Так же объекты можно выбирать, то есть когда мы кликаем по объекту - он останавливается (здесь продемонстрированна работа с выбором объекта в 3D-мире. Тоже запусти программу.

Вот эти два туториала: http://www.gamedev.ru/code/articles/OpenGL_Qt4 (там первая часть и вторая)



Вообще говоря, Eclipce и NetBeasns - конкуренты. У них много общего. Но у NetBeans намного больше приимуществ. Особенно для
"полиглота". Чтобы программировать в Eclipse на Java и C++ нужно ставить две Eclipse. Ещё в NetBeans можно пограммирвать на PHP, JavaScript, jQuery (это библиотека для программистов на JavaScript, как Qt для программистов на C++). NetBeans намного популярнее, удобнее и быстрее. К тому же NebBeans находится на поддержке такой огромной корпорации, как Oracle. Программисты Oracle используют NetBeans. 

Ты постепенно освоишься в NetBeans. Я буду давать тебе короткие, но вполне рабочии иструкции.

Вот следующая после С++. Это инструкция о создании программки на Java


Когда-то давно научился набирать 10-ю пальцами, а сейчас в свободное время стал проходить это (английский набор, русский и цифры)
Программа для тренировки десятипальцевого слепого метода скоростного набора "Соло на Клавиатуре" (включает русскую и английскую версии, а так же содержит материал для тренировки быстрого набора цифр)

Все книжки нужно читать итеративно. То есть первый раз читаешь обзорно. Второй раз углубленно. Третий раз - для закрепления.

Код из 7-ого видео не сработает, как как в Qt5 кое что изменили. А именно, в файле проекта (.pro) нужно писать QT += widgets А чтобы работало и в Qt4 нужно написать greaterThan(QT_MAJOR_VERSION, 4): QT += widgets

- скачать и установить MinGW
- скачать и установить NetBeans 7.4 (All)

- работаем через Skype
- открыть проект Lab11
- создать пустой проект Lab_11
- показать, как выравнивать код в NetBeans
- создать .h файлы

исправить в файле medicine.cpp
    price = atoi(r);
    if (atoi(r) == 0) {
        cout << "Ошибка! Произведите корректный ввод данных" << endl;
    }
	
удалить system("dir"); из pharmap.cpp
удалить system("dir"); из pharmv.cpp
удалить system("dir"); из pharma.cpp

Object_to_file

О методах set и get класса User. В данной ситуации это нецелесообразно. Мы используем, как структуру.

What problem do you have?
What problem have you?

В комментариях несоответсвия

Обсудить класс sum:
- показать, как писать unit-тест для sum
- можно было бы написать, если переопределить оператов присваивания
- защита от ошибок ввода

Сейчас рассмотрим с тобой модульное тестирование. Оно нужно, чтобы подтвердить работоспособность класса. Набор тестов сопровождают класс всегда и когда разработчик вносит изменения в класс и когда класс сдаётся заказчику.

Суть следующего примера в следующем. Мы научимся тестировать классы. Для этого созданим несколько тестов. Один вместе, а два ты создашь самостоятельно. Каждый тест содержит входные значения для метода класса, ожидаемый результат и результат работы метода. Ожидаемый результат обязан совпасть с результатом работы метода тестируемого объекта класса sum.

- открой пример с классом sum
- создай проект Unit Test (когда выберешь проект Unit Test, посмотри, что справа написано про этот проект, для чего он) с именем TestSum
- создай класс sum и скопируй туда содержимое
- открой файл tst_testsumtest.cpp и включи заголовок #include "sum.h"
- нажми кнопку Help справа на панели
- выбери слева-вверху Index и набери в поле Look for: QVERIFY2 (после нажатия на Enter, выбери Qt5)
- теперь двигайся вверх и найдёшь QCOMPARE( actual, expected) - который сравнивает два значения
- скопируй QCOMPARE( actual, expected) (мельком прочти, что делает это макрос) и перейди в Edit режим (вверху-слева вторая кнопка от Welcome) 
- открой файл tst_testsumtest.cpp и вставь скопированное QCOMPARE( actual, expected) и отредактируй так:

void TestSumTest::testCase1()
{
    int a = 15;
    int b = 3;
    int expected = 18;

    sum itog;
    itog.a = a;
    itog.b = b;
    int actual = itog.summa();

    QCOMPARE(actual, expected);
}

- запусти и обрати внимание на это "0 failed", то есть ошибок нет
- перейди в файл sum.cpp и внеси ошибку return a - b;
- запусти и ты увидишь такое сообщение:

FAIL!  : TestSumTest::testCase1() Compared values are not the same
   Actual   (actual): 12
   Expected (expected): 18
../TestSum/tst_testsumtest.cpp(31) : failure location
PASS   : TestSumTest::cleanupTestCase()
Totals: 2 passed, 1 failed, 0 skipped

Тут говорится, что сравниваемые значения не равны друг другу. Ожидаемый результат не совпал с результатом работы метода sum.

Результат работы метода sum: Actual   (actual): 12
Ожидаемый результат: Expected (expected): 18

"1 failed" - это значит, одна ошибка

Пока не будем исправлять. Твоя задача:
- создать ещё два теста (с входными значениями на твой усмотрение)
- скопировать мне в чат результат работы программы (из окна Application Output)
- скопировать результат после исправления в методе: return a - b; -> return a + b;

Подсказка:

- нужно создать две функции:
void TestSumTest::testCase2() {
}

void TestSumTest::testCase3() {
}

- и создать два объявления:

private Q_SLOTS:
    void testCase1();
    void testCase2();
    void testCase3();
	
	
Как работать с vk.com на Qt



Как работать с чужим классом

Рассмотрим работу с классом VKAuth. В данный момент ты являешься пользователем чужого класса. Для тебя важно смотреть только в заголовочный файл и только на открытые функции и переменные класса (в Qt ещё и на сигналы; объекты класса с сигналами способны посылать сигналы другим объектам, если ты свяжешь объект (которые посылает сигнал) и функцию другого объекта (эта фукнция будет срабатывать, в том момент, когда будет послан сигнал)).

Какие открытые функции и переменные ты видишь в классе VKAuth? Скопируй мне мне



Перейди на https://github.com/ и зарегистрируйся


Установка NetBeans и запуск первой программы:

- установи NetBeans
- запусти NetBeans
- проверь, что задан правильный нуть к инструментам. Для этого в меню выбери -> Tools -> Options -> C/C++
- под Tool Collection нажми кнопку Add
- нажми кнопку Browse и выбери следующий путь C:\cygwin\bin
- если кнопка Default под Tool Collection активна, то нажми её
у меня это выглядит так
- выбери в меню File -> New Project -> C/C++ -> C/C++ Application
- набери Project Name: HelloCppNetBeans
- нажми кнопку Finish
- открой файл main.cpp и скопируй в него следующий текст программы:

#include <iostream>
using namespace std;

int main(int argc, char** argv) {
    cout << "Hello C++ NetBeasn" << endl;
    return 0;
}

- откомпилируй и запусти приложение, нажав зелёный треугольник на панели иснрументов
- посмори вывелась ли строка в Output



Первая программа на С++ в NetBeans 7.4

выбери



Время для чтения Крупника

Написать webBrowser с progressBar'ом

Показать примеры из Qt SDK

Рассказать об вершине и моём начале в OpenGL (дать пример и ссылку на статью)

Настройка среды NetBeans IDE 7.4 для языков C/C++
https://netbeans.org/community/releases/74/cpp-setup-instructions_ru.html

002_hello_world
003_Intro_to_GUI_programming
004_Signals_and_Slots
005_Displaying_Windows
006_layouts_tabs_and_buddies
007_Basic_Application_and_HTML_Aware_Widgets
008_Horizontal_and_Vertical_Layouts
009_QGridLayout
010_Splitters
011_QDir
012_QFile
013_Resource_Files
014_QLabel_and_Qt_Designer
015_QPushButton
016_QLineEdit
017_QCheckBox
018_QRadioButton
019_QComboBox
020_QListWidget
021_QTreeWidget
